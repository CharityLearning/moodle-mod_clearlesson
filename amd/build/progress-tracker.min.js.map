{"version":3,"file":"progress-tracker.min.js","sources":["../src/progress-tracker.js"],"sourcesContent":["/* eslint-disable promise/catch-or-return */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Progress tracker for mod_clearlesson.\n *\n * @module     mod_clearlesson/progress-tracker\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport Ajax from 'core/ajax';\n\nexport const init = async() => {\n    if (typeof window.VimeoPlayerConstructor === 'undefined') {\n        setTimeout(init, 100);\n        return;\n    }\n    if (typeof window.player !== 'undefined') {\n        await window.player.destroy(); // We destroy the previous player before creating a new one.\n        delete window.player;\n    }\n\n    const iframe = document.querySelector('.video-container > iframe.videoframe');\n\n    window.player = new window.VimeoPlayerConstructor(iframe);\n\n    window.extref = await window.player.getVideoTitle().then(function(title) {\n        return title;\n    });\n\n    // When progress is updated, if the video has a higher status already, we don't update it.\n    window.viewedStatus = 'unwatched';\n    window.player.on('play', function() {\n        if (window.viewedStatus === 'unwatched') {\n            window.viewedStatus = 'inprogress';\n        }\n    });\n\n    window.player.on('ended', async function() {\n        if (window.updateProgress) {\n            videoWatched();\n            await updateProgressAndActivity();\n        }\n    });\n\n    window.currentTime = 0;\n    window.player.on('timeupdate', function(data) {\n        window.player.getDuration().then(async function(duration) {\n            // If 90% of the video has been watched, we update the status to 'watched'.\n            if (data.seconds / duration >= 0.9) {\n                if (window.updateProgress) {\n                    videoWatched();\n                    updateProgressAndActivity();\n                }\n            }\n            return true;\n        });\n        // Round off and provide as integer.\n        window.currentTime = Math.round(data.seconds);\n    });\n\n    // Before the user leaves the page, we update the progress.\n    window.addEventListener('beforeunload', async function() {\n        if (window.updateProgress) {\n            await updateProgressAndActivity();\n        }\n    }, true);\n\n    // Every 30 minutes we update the progress.\n    setInterval(async function() {\n        if (window.updateProgress) {\n            await updateProgressAndActivity();\n        }\n    }, 1800000);\n};\n\n/**\n * Update the progress and status of the video.\n *\n * @return {Promise} The promise with the response of the AJAX call.\n */\nconst updateProgress = async() => {\n    if (typeof window.extref === 'undefined'\n        || typeof window.viewedStatus === 'undefined' || typeof window.currentTime === 'undefined'\n        || typeof window.courseid === 'undefined' || typeof window.cmid === 'undefined'\n        || typeof window.resourceRef === 'undefined' || typeof window.type === 'undefined'\n        || typeof window.pageType === 'undefined') {\n        return false;\n    }\n\n    const args = {\n        externalref: window.extref,\n        status: window.viewedStatus,\n        duration: window.currentTime,\n        courseid: window.courseid,\n        cmid: window.cmid,\n        resourceref: window.resourceRef,\n        type: window.type,\n        pagetype: window.pageType\n    };\n\n    const request = {\n                        methodname: 'mod_clearlesson_update_progress',\n                        args: args\n                    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * The video has been watched, update the status and reveal any watched checks relevant in the DOM.\n */\nfunction videoWatched() {\n    window.viewedStatus = 'watched';\n    window.updateProgress = false;\n    document.querySelector('.video-title-wrapper .watched-check').classList.remove('notwatched');\n    const playlistVideoLink = document.querySelector('.video-card-side a[data-externalref=\"' + window.extref + '\"]');\n    if (playlistVideoLink) {\n        playlistVideoLink.closest('.video-card-side').querySelector('.watched-check').classList.remove('notwatched');\n        const otherVideosColumn = playlistVideoLink.closest('.box');\n        let watchedAll = true;\n        otherVideosColumn.querySelectorAll('.watched-check').forEach(function(watchedCheck) {\n            if (watchedCheck.classList.contains('notwatched')) {\n                watchedAll = false;\n            }\n        });\n        if (watchedAll) {\n            const itemRef = playlistVideoLink.closest('.incourse-player').getAttribute('data-resourceref');\n            menuItemWatched(itemRef);\n        }\n    }\n}\n\n/**\n * All videos in a menu item have been watched, update the menuitem by removing the notwatched class.\n * @param {String} itemRef The externalref of the menu item.\n */\nexport function menuItemWatched(itemRef) {\n    const menuItem = document.querySelector('.menu-item[data-externalref=\"' + itemRef + '\"]');\n    if (menuItem) {\n        menuItem.querySelector('.watched-check').classList.remove('notwatched');\n    }\n}\n\n/**\n * Update the progress of the video and then the activity module in the course page if required.\n */\nexport async function updateProgressAndActivity() {\n    var activityInfo;\n    const response = await updateProgress();\n    if (response?.activitymodulehtml) {\n        if (window.pageType === 'course') {\n            activityInfo = document.querySelector('.activity[data-id=\"' + window.cmid + '\"]');\n        }\n        if (window.pageType === 'activity') {\n            activityInfo = document.querySelector('.activity-header');\n        }\n        if (activityInfo) {\n            activityInfo.outerHTML = response.activitymodulehtml;\n        }\n    }\n}\n"],"names":["init","async","window","VimeoPlayerConstructor","setTimeout","player","destroy","iframe","document","querySelector","extref","getVideoTitle","then","title","viewedStatus","on","updateProgress","videoWatched","updateProgressAndActivity","currentTime","data","getDuration","duration","seconds","Math","round","addEventListener","setInterval","classList","remove","playlistVideoLink","closest","otherVideosColumn","watchedAll","querySelectorAll","forEach","watchedCheck","contains","menuItemWatched","getAttribute","itemRef","menuItem","activityInfo","response","courseid","cmid","resourceRef","type","pageType","request","methodname","args","externalref","status","resourceref","pagetype","Ajax","call","activitymodulehtml","outerHTML"],"mappings":";;;;;;;;kPA2BaA,KAAOC,kBAC6B,IAAlCC,OAAOC,mCACdC,WAAWJ,KAAM,UAGQ,IAAlBE,OAAOG,eACRH,OAAOG,OAAOC,iBACbJ,OAAOG,cAGZE,OAASC,SAASC,cAAc,wCAEtCP,OAAOG,OAAS,IAAIH,OAAOC,uBAAuBI,QAElDL,OAAOQ,aAAeR,OAAOG,OAAOM,gBAAgBC,MAAK,SAASC,cACvDA,SAIXX,OAAOY,aAAe,YACtBZ,OAAOG,OAAOU,GAAG,QAAQ,WACO,cAAxBb,OAAOY,eACPZ,OAAOY,aAAe,iBAI9BZ,OAAOG,OAAOU,GAAG,SAASd,iBAClBC,OAAOc,iBACPC,qBACMC,gCAIdhB,OAAOiB,YAAc,EACrBjB,OAAOG,OAAOU,GAAG,cAAc,SAASK,MACpClB,OAAOG,OAAOgB,cAAcT,MAAKX,eAAeqB,iBAExCF,KAAKG,QAAUD,UAAY,IACvBpB,OAAOc,iBACPC,eACAC,8BAGD,KAGXhB,OAAOiB,YAAcK,KAAKC,MAAML,KAAKG,YAIzCrB,OAAOwB,iBAAiB,gBAAgBzB,iBAChCC,OAAOc,sBACDE,+BAEX,GAGHS,aAAY1B,iBACJC,OAAOc,sBACDE,8BAEX,mCAuCED,eACLf,OAAOY,aAAe,UACtBZ,OAAOc,gBAAiB,EACxBR,SAASC,cAAc,uCAAuCmB,UAAUC,OAAO,oBACzEC,kBAAoBtB,SAASC,cAAc,wCAA0CP,OAAOQ,OAAS,SACvGoB,kBAAmB,CACnBA,kBAAkBC,QAAQ,oBAAoBtB,cAAc,kBAAkBmB,UAAUC,OAAO,oBACzFG,kBAAoBF,kBAAkBC,QAAQ,YAChDE,YAAa,KACjBD,kBAAkBE,iBAAiB,kBAAkBC,SAAQ,SAASC,cAC9DA,aAAaR,UAAUS,SAAS,gBAChCJ,YAAa,MAGjBA,WAAY,CAEZK,gBADgBR,kBAAkBC,QAAQ,oBAAoBQ,aAAa,gCAUvED,gBAAgBE,eACtBC,SAAWjC,SAASC,cAAc,gCAAkC+B,QAAU,MAChFC,UACAA,SAAShC,cAAc,kBAAkBmB,UAAUC,OAAO,6BAO5CX,gCACdwB,mBACEC,cApEa1C,mBACU,IAAlBC,OAAOQ,aACoB,IAAxBR,OAAOY,mBAA8D,IAAvBZ,OAAOiB,kBACjC,IAApBjB,OAAO0C,eAAmD,IAAhB1C,OAAO2C,WAC1B,IAAvB3C,OAAO4C,kBAAsD,IAAhB5C,OAAO6C,WAChC,IAApB7C,OAAO8C,gBACV,QAcLC,QAAU,CACIC,WAAY,kCACZC,KAbP,CACTC,YAAalD,OAAOQ,OACpB2C,OAAQnD,OAAOY,aACfQ,SAAUpB,OAAOiB,YACjByB,SAAU1C,OAAO0C,SACjBC,KAAM3C,OAAO2C,KACbS,YAAapD,OAAO4C,YACpBC,KAAM7C,OAAO6C,KACbQ,SAAUrD,OAAO8C,kBAQdQ,cAAKC,KAAK,CAACR,UAAU,IA2CLjC,GACnB2B,MAAAA,UAAAA,SAAUe,qBACc,WAApBxD,OAAO8C,WACPN,aAAelC,SAASC,cAAc,sBAAwBP,OAAO2C,KAAO,OAExD,aAApB3C,OAAO8C,WACPN,aAAelC,SAASC,cAAc,qBAEtCiC,eACAA,aAAaiB,UAAYhB,SAASe"}