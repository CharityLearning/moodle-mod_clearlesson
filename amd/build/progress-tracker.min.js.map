{"version":3,"file":"progress-tracker.min.js","sources":["../src/progress-tracker.js"],"sourcesContent":["/* eslint-disable promise/catch-or-return */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Progress tracker for mod_clearlesson.\n *\n * @module     mod_clearlesson/progress-tracker\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport Ajax from 'core/ajax';\n\nexport const init = async() => {\n    if (typeof window.player !== 'undefined') {\n        await window.player.destroy(); // We destroy the previous player before creating a new one.\n        delete window.player;\n    }\n\n    const iframe = document.querySelector('.video-container > iframe.videoframe');\n    window.player = new window.VimeoPlayerConstructor(iframe);\n\n    window.extref = await window.player.getVideoTitle().then(function(title) {\n        return title;\n    });\n\n    // When progress is updated, if the video has a higher status already, we don't update it.\n    window.viewedStatus = 'unwatched';\n    window.player.on('play', function() {\n        if (window.viewedStatus === 'unwatched') {\n            window.viewedStatus = 'inprogress';\n        }\n    });\n\n    window.player.on('ended', async function() {\n        if (window.updateProgress) {\n            videoWatched();\n            await updateProgressAndActivity();\n        }\n    });\n\n    window.currentTime = 0;\n    window.player.on('timeupdate', function(data) {\n        window.player.getDuration().then(async function(duration) {\n            // If 90% of the video has been watched, we update the status to 'watched'.\n            if (data.seconds / duration >= 0.9) {\n                if (window.updateProgress) {\n                    videoWatched();\n                    updateProgressAndActivity();\n                }\n            }\n            return true;\n        });\n        // Round off and provide as integer.\n        window.currentTime = Math.round(data.seconds);\n    });\n\n    // Before the user leaves the page, we update the progress.\n    window.addEventListener('beforeunload', async function() {\n        if (window.updateProgress) {\n            await updateProgressAndActivity();\n        }\n    }, true);\n\n    // Every 30 minutes we update the progress.\n    setInterval(async function() {\n        if (window.updateProgress) {\n            await updateProgressAndActivity();\n        }\n    }, 1800000);\n};\n\n/**\n * Update the progress and status of the video.\n *\n * @return {Promise} The promise with the response of the AJAX call.\n */\nconst updateProgress = async() => {\n    if (typeof window.extref === 'undefined'\n        || typeof window.viewedStatus === 'undefined' || typeof window.currentTime === 'undefined'\n        || typeof window.courseid === 'undefined' || typeof window.cmid === 'undefined'\n        || typeof window.resourceRef === 'undefined' || typeof window.type === 'undefined') {\n        return false;\n    }\n\n    const request = {\n                        methodname: 'mod_clearlesson_update_progress',\n                        args: {\n                            externalref: window.extref,\n                            status: window.viewedStatus,\n                            duration: window.currentTime,\n                            courseid: window.courseid,\n                            cmid: window.cmid,\n                            resourceref: window.resourceRef,\n                            type: window.type\n                        }\n                    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * The video has been watched, update the status and reveal the watched check.\n */\nfunction videoWatched() {\n    window.viewedStatus = 'watched';\n    window.updateProgress = false;\n    document.querySelector('.video-title-wrapper .watched-check').classList.remove('notwatched');\n    const playlistVideoLink = document.querySelector('.video-card-side a[data-externalref=\"' + window.extref + '\"]');\n    if (playlistVideoLink) {\n       playlistVideoLink.closest('.video-card-side').querySelector('.watched-check').classList.remove('notwatched');\n    }\n}\n\n/**\n * Update the progress of the video and then the activity module in the course page if required.\n */\nexport async function updateProgressAndActivity() {\n    const response = await updateProgress();\n    if (response?.activitymodulehtml) {\n        const activity = document.querySelector('.activity[data-id=\"' + window.cmid + '\"]');\n        if (activity) {\n            activity.outerHTML = response.activitymodulehtml;\n        }\n    }\n}\n"],"names":["async","window","player","destroy","iframe","document","querySelector","VimeoPlayerConstructor","extref","getVideoTitle","then","title","viewedStatus","on","updateProgress","videoWatched","updateProgressAndActivity","currentTime","data","getDuration","duration","seconds","Math","round","addEventListener","setInterval","classList","remove","playlistVideoLink","closest","response","courseid","cmid","resourceRef","type","request","methodname","args","externalref","status","resourceref","Ajax","call","activitymodulehtml","activity","outerHTML"],"mappings":";;;;;;;;iNA2BoBA,eACa,IAAlBC,OAAOC,eACRD,OAAOC,OAAOC,iBACbF,OAAOC,cAGZE,OAASC,SAASC,cAAc,wCACtCL,OAAOC,OAAS,IAAID,OAAOM,uBAAuBH,QAElDH,OAAOO,aAAeP,OAAOC,OAAOO,gBAAgBC,MAAK,SAASC,cACvDA,SAIXV,OAAOW,aAAe,YACtBX,OAAOC,OAAOW,GAAG,QAAQ,WACO,cAAxBZ,OAAOW,eACPX,OAAOW,aAAe,iBAI9BX,OAAOC,OAAOW,GAAG,SAASb,iBAClBC,OAAOa,iBACPC,qBACMC,gCAIdf,OAAOgB,YAAc,EACrBhB,OAAOC,OAAOW,GAAG,cAAc,SAASK,MACpCjB,OAAOC,OAAOiB,cAAcT,MAAKV,eAAeoB,iBAExCF,KAAKG,QAAUD,UAAY,IACvBnB,OAAOa,iBACPC,eACAC,8BAGD,KAGXf,OAAOgB,YAAcK,KAAKC,MAAML,KAAKG,YAIzCpB,OAAOuB,iBAAiB,gBAAgBxB,iBAChCC,OAAOa,sBACDE,+BAEX,GAGHS,aAAYzB,iBACJC,OAAOa,sBACDE,8BAEX,gBAmCED,eACLd,OAAOW,aAAe,UACtBX,OAAOa,gBAAiB,EACxBT,SAASC,cAAc,uCAAuCoB,UAAUC,OAAO,oBACzEC,kBAAoBvB,SAASC,cAAc,wCAA0CL,OAAOO,OAAS,MACvGoB,mBACDA,kBAAkBC,QAAQ,oBAAoBvB,cAAc,kBAAkBoB,UAAUC,OAAO,6BAOhFX,kCACZc,cAzCa9B,mBACU,IAAlBC,OAAOO,aACoB,IAAxBP,OAAOW,mBAA8D,IAAvBX,OAAOgB,kBACjC,IAApBhB,OAAO8B,eAAmD,IAAhB9B,OAAO+B,WAC1B,IAAvB/B,OAAOgC,kBAAsD,IAAhBhC,OAAOiC,YACvD,QAGLC,QAAU,CACIC,WAAY,kCACZC,KAAM,CACFC,YAAarC,OAAOO,OACpB+B,OAAQtC,OAAOW,aACfQ,SAAUnB,OAAOgB,YACjBc,SAAU9B,OAAO8B,SACjBC,KAAM/B,OAAO+B,KACbQ,YAAavC,OAAOgC,YACpBC,KAAMjC,OAAOiC,cAI9BO,cAAKC,KAAK,CAACP,UAAU,IAoBLrB,MACnBgB,MAAAA,UAAAA,SAAUa,mBAAoB,OACxBC,SAAWvC,SAASC,cAAc,sBAAwBL,OAAO+B,KAAO,MAC1EY,WACAA,SAASC,UAAYf,SAASa"}