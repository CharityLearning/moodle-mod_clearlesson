{"version":3,"file":"course-page.min.js","sources":["../src/course-page.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A set of functions to be added to charts tab load-tabs.js.\n * Most of these functions enable modal forms for the adding/deleting of charts or editing existing charts.\n *\n * @module     mod_clearlesson/course-page\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport ModalForm from 'core_form/modalform';\nimport * as Utils from './utils';\nimport {updateProgressAndActivity} from './progress-tracker';\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\n\nvar url, playerModal, formClass, backString, modalType, moodleCompleted;\nvar firstLoad = 1;\n\nexport const init = () => {\n    var position = 1;\n    window.openPlayer = (e, type) => {\n        if (e.target.href.includes('clearlesson')) {\n            e.preventDefault();\n            const elementAncestor = e.target.closest('.activity');\n            // Used in the progress tracker as well as on this page.\n            window.cmid = elementAncestor.querySelector('.activityname a')\n                                                .getAttribute('href').split('id=')[1];\n\n            window.type = type;\n            const searchParams = new URLSearchParams(window.location.search);\n            url = e.target.href;\n            window.courseid = searchParams.get('id'); // Used in the progress tracker as well as on this page.\n\n            var instanceNameElement = elementAncestor.querySelector('.activityname .instancename');\n            const span = instanceNameElement.querySelector('span');\n            if (span) {\n                instanceNameElement.removeChild(span);\n            }\n            const instanceName = instanceNameElement.innerText;\n\n            if (type === 'series' || type === 'collections') {\n                formClass = 'mod_clearlesson\\\\forms\\\\incourse_menu_form';\n                modalType = 'menu';\n            } else {\n                formClass = 'mod_clearlesson\\\\forms\\\\incourse_player_form';\n                modalType = 'player';\n            }\n\n            playerModal = new ModalForm({\n                formClass: formClass,\n                args: {cmid: window.cmid,\n                        course: window.courseid,\n                        url: url,\n                        firstload: firstLoad},\n                modalConfig: {title: instanceName},\n            });\n\n            playerModal.addEventListener(playerModal.events.LOADED, function() {\n                const modalRootInner = playerModal.modal.getRoot()[0].children[0];\n                if (type !== 'play') {\n                    // Set the modal to nearly fullscreen size.\n                    let modalHeight = Math.ceil(window.innerHeight * 0.94);\n                    let modalWidth = Math.ceil(window.innerWidth * 0.94);\n                    modalWidth = modalWidth > 1800 ? 1800 : modalWidth;\n                    modalRootInner.setAttribute('style',\n                        'width: ' + modalWidth +\n                        'px;max-width: ' + modalWidth +\n                        'px;height: ' + modalHeight +\n                        'px;max-height: ' + modalHeight + 'px;'\n                    );\n                }\n\n                if (modalType === 'player') {\n                    Utils.waitForElement('.incourse-player', modalRootInner, async function() {\n                        // Store the resource reference for the progress tracker.\n                        await updateProgressAndActivity();\n                        window.resourceRef = document.querySelector('.incourse-player').getAttribute('data-resourceref');\n                        window.type = document.querySelector('.incourse-player').getAttribute('data-type');\n                        setWindowWatched();\n                    });\n                }\n\n                const completionDropdown = elementAncestor.querySelector('.completion-dropdown');\n                if (completionDropdown.classList.contains('btn-success')) {\n                    moodleCompleted = true;\n                } else {\n                    moodleCompleted = false;\n                }\n\n                Utils.waitForElement('.incourse', modalRootInner, async function() {\n                    if (modalRootInner.querySelector('.incourse').getAttribute('data-watchedall') == '1') {\n                        window.viewedStatus = 'watched';\n                        window.watched = true;\n                        if (!moodleCompleted) {\n                            // All the videos have been watched but the activity has not been marked as complete.\n                            // If the completionwatchedall rule is enabled, we can mark the activity as complete.\n                            const watchdAllRuleString = await getString('watchedallrule', 'mod_clearlesson');\n                            if (completionDropdown.outerHTML.includes(watchdAllRuleString)) {\n                                window.currentTime = 0;\n                                window.resourceRef = modalRootInner.querySelector('.incourse').getAttribute('data-resourceref');\n                                window.extref = '';\n                                await updateProgressAndActivity();\n                            }\n                        }\n                    }\n                });\n\n                Utils.waitForElement('.modal-footer button.btn-primary', modalRootInner, async function() {\n                    backString = await getString('back');\n                    const saveButton = modalRootInner.querySelector('.modal-footer button.btn-primary');\n                    saveButton.classList.add('d-none');\n                    const cancelButton = modalRootInner.querySelector('.modal-footer button.btn-secondary');\n                    cancelButton.innerHTML = backString;\n                });\n\n                Ajax.call([{\n                    methodname: 'mod_clearlesson_course_module_viewed',\n                    args: {courseid: window.courseid, cmid: window.cmid},\n                    done: function(response) {\n                        // Update the entire activity module html, this update the completion status if present.\n                        e.target.closest('.activity').outerHTML = response.activitymodulehtml;\n                    }\n                }]);\n            });\n\n            playerModal.show();\n        }\n    };\n\n    document.addEventListener('click', async function(e) {\n        const element = e.target;\n        if (element.classList?.contains('play-icon')\n        || element.parentElement.classList?.contains('play-icon')\n        || element.classList?.contains('video-player-link')\n        || element.parentElement.classList?.contains('video-player-link')) {\n            e.preventDefault();\n            await updateProgressAndActivity();\n            position = parseInt(element.closest('.has-position').getAttribute('data-position'));\n            reRenderPlayerModal(position, url);\n        }\n    });\n};\n\n/**\n * Open the player modal.\n *\n * @param {Number} position The position of the resource in the list.\n * @param {String} url The URL of the resource.\n */\nasync function reRenderPlayerModal(position, url) {\n    const formParams = {cmid: window.cmid, course: window.courseid, url: url, position: position, firstload: false};\n    const serialFormParams = Utils.serialize(formParams);\n    const bodyContent = playerModal.getBody(serialFormParams);\n    await playerModal.modal.setBodyContent(bodyContent);\n    setWindowWatched();\n}\n\n/**\n * Set the watched status of the window.\n */\nfunction setWindowWatched() {\n    const watchedCheck = document.querySelector('.incourse-player .player-column .watched-check');\n    window.watched = !watchedCheck?.classList.contains('notwatched');\n}"],"names":["url","playerModal","formClass","backString","modalType","moodleCompleted","setWindowWatched","watchedCheck","document","querySelector","window","watched","classList","contains","openPlayer","e","type","target","href","includes","preventDefault","elementAncestor","closest","cmid","getAttribute","split","searchParams","URLSearchParams","location","search","courseid","get","instanceNameElement","span","removeChild","instanceName","innerText","ModalForm","args","course","firstload","modalConfig","title","addEventListener","events","LOADED","modalRootInner","modal","getRoot","children","modalHeight","Math","ceil","innerHeight","modalWidth","innerWidth","setAttribute","Utils","waitForElement","async","resourceRef","completionDropdown","viewedStatus","watchdAllRuleString","outerHTML","currentTime","extref","add","innerHTML","call","methodname","done","response","activitymodulehtml","show","element","parentElement","_element$parentElemen","_element$classList2","_element$parentElemen2","position","formParams","serialFormParams","serialize","bodyContent","getBody","setBodyContent","reRenderPlayerModal","parseInt"],"mappings":"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"}