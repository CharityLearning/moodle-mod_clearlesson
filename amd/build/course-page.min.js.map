{"version":3,"file":"course-page.min.js","sources":["../src/course-page.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A set of functions to be added to charts tab load-tabs.js.\n * Most of these functions enable modal forms for the adding/deleting of charts or editing existing charts.\n *\n * @module     mod_clearlesson/course-page\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport ModalForm from 'core_form/modalform';\nimport * as Utils from './utils';\nimport {updateProgressAndActivity} from './progress-tracker';\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\n\nvar url, playerModal, formClass, backString, modalType, moodleCompleted, playerModalFromMenu, newMenuModal, completionDropdown;\nvar firstLoad = 1;\n\n\nexport const init = () => {\n    var position = 1;\n    window.openPlayer = async(e, type) => {\n        if (e.target.href.includes('clearlesson')) {\n            e.preventDefault();\n            backString = await getString('back');\n            const elementAncestor = e.target.closest('.activity');\n            // Used in the progress tracker as well as on this page.\n            window.cmid = elementAncestor.querySelector('.activityname a')\n                                                .getAttribute('href').split('id=')[1];\n\n            window.type = type;\n            const searchParams = new URLSearchParams(window.location.search);\n            url = e.target.href;\n            window.courseid = searchParams.get('id'); // Used in the progress tracker as well as on this page.\n            const instanceNameElement = elementAncestor.querySelector('.activityname .instancename');\n            const span = instanceNameElement.querySelector('span');\n            if (span) {\n                instanceNameElement.removeChild(span);\n            }\n            const instanceName = instanceNameElement.innerText;\n\n            if (type === 'series' || type === 'collections') {\n                formClass = 'mod_clearlesson\\\\forms\\\\incourse_menu_form';\n                modalType = 'menu';\n            } else {\n                formClass = 'mod_clearlesson\\\\forms\\\\incourse_player_form';\n                modalType = 'player';\n            }\n\n            playerModal = new ModalForm({\n                formClass: formClass,\n                args: {cmid: window.cmid,\n                        course: window.courseid,\n                        url: url,\n                        firstload: firstLoad,\n                        level: 1},\n                modalConfig: {title: instanceName},\n            });\n\n            playerModal.addEventListener(playerModal.events.LOADED, function() {\n                const modalRootInner = playerModal.modal.getRoot()[0].children[0];\n                if (type !== 'play') {\n                    setModalFullscreen(modalRootInner);\n                }\n\n                if (modalType === 'player') {\n                    Utils.waitForElement('.incourse-player', modalRootInner, async function() {\n                        if (window.updateProgress) {\n                            await updateProgressAndActivity(); // Record any progress from the last player.\n                        }\n                        // Store the resource reference for the progress tracker.\n                        window.resourceRef = document.querySelector('.incourse-player').getAttribute('data-resourceref');\n                        window.type = document.querySelector('.incourse-player').getAttribute('data-type');\n                        setWindowWatched();\n                    });\n                }\n\n                if (modalType === 'menu') {\n                    Utils.waitForElement('.incourse-player', modalRootInner, async function() {\n                        if (window.updateProgress) {\n                            await updateProgressAndActivity(); // Record any progress from the last player.\n                        }\n                        window.updateProgress = false;\n                    });\n                    // TODO Check if the completion is enabled. and if the activity is marked as complete.\n                    // If the completion is enabled, and all videos are watched and the activity is not marked as complete,\n                    // mark the activity as complete.\n                }\n\n                completionDropdown = elementAncestor.querySelector('.completion-dropdown');\n                updateCompletionStatusIfIncorrect(completionDropdown, modalRootInner);\n\n                setModalButtons(modalRootInner);\n\n                Ajax.call([{\n                    methodname: 'mod_clearlesson_course_module_viewed',\n                    args: {courseid: window.courseid, cmid: window.cmid},\n                    done: function(response) {\n                        // Update the entire activity module html, this update the completion status if present.\n                        e.target.closest('.activity').outerHTML = response.activitymodulehtml;\n                    }\n                }]);\n            });\n\n            playerModal.show();\n        }\n    };\n\n    document.addEventListener('click', async function(e) {\n        const element = e.target;\n        if (element.classList?.contains('play-icon')\n        || element.parentElement.classList?.contains('play-icon')\n        || element.classList?.contains('video-player-link')\n        || element.parentElement.classList?.contains('video-player-link')) {\n            e.preventDefault();\n            if (element.classList.contains('incourse-player-link')\n            || element.parentElement.classList.contains('incourse-player-link')) {\n                if (element.getAttribute('data-type') === 'playlists'\n                || element.parentElement.getAttribute('data-type') === 'playlists') {\n                    // 2nd level modals.\n                    console.log('p from m');\n                    openPlayerFromMenu(e);\n                } else {\n                    // For collections we'll open the series menu.\n                    console.log('m from m');\n                    openNewMenuModal(e);\n                }\n            } else {\n                // if (window.updateProgress) { // This happens on modal load already i think.\n                //     await updateProgressAndActivity();\n                // }\n                position = parseInt(element.closest('.has-position').getAttribute('data-position'));\n                reRenderPlayerModal(position, url);\n            }\n        }\n    });\n};\n\n/**\n * Open the player modal.\n *\n * @param {Number} position The position of the resource in the list.\n * @param {String} url The URL of the resource.\n */\nasync function reRenderPlayerModal(position, url) {\n    const formParams = {cmid: window.cmid, course: window.courseid, url: url, position: position, firstload: false};\n    const serialFormParams = Utils.serialize(formParams);\n    const bodyContent = playerModal.getBody(serialFormParams);\n    await playerModal.modal.setBodyContent(bodyContent);\n    setWindowWatched();\n}\n\n/**\n * Set the watched status of the window.\n */\nfunction setWindowWatched() {\n    const watchedCheck = document.querySelector('.incourse-player .player-column .watched-check');\n    // If the video has been watched already dont update the progress.\n    window.updateProgress = watchedCheck?.classList.contains('notwatched');\n}\n\n/**\n * Open the player modal from the menu item.\n * @param {Event} e The event object.\n */\nfunction openPlayerFromMenu(e) {\n    const elementAncestor = e.target.closest('.menu-item');\n    const instanceName = elementAncestor.querySelector('.menu-item-title > .searchable').innerHTML;\n    const externalRef = elementAncestor.getAttribute('data-externalref');\n    window.type = 'playlists';\n    playerModalFromMenu = new ModalForm({\n        formClass: 'mod_clearlesson\\\\forms\\\\incourse_player_form',\n        args: {cmid: window.cmid,\n                course: window.courseid,\n                url: url,\n                firstload: firstLoad,\n                externalref: externalRef,\n                level: 2},\n        modalConfig: {title: instanceName},\n    });\n\n    playerModalFromMenu.addEventListener(playerModalFromMenu.events.LOADED, function() {\n        const modalRootInner = playerModalFromMenu.modal.getRoot()[0].children[0];\n        setModalFullscreen(modalRootInner);\n\n        Utils.waitForElement('.incourse-player', modalRootInner, async function() {\n            if (window.updateProgress) {\n                await updateProgressAndActivity(); // Record any progress from the last player.\n            }\n            // Store the resource reference for the progress tracker.\n            window.resourceRef = document.querySelector('.incourse-player').getAttribute('data-resourceref');\n            window.type = document.querySelector('.incourse-player').getAttribute('data-type');\n            setWindowWatched();\n        });\n\n        updateCompletionStatusIfIncorrect(completionDropdown, modalRootInner);\n\n        setModalButtons(modalRootInner);\n    });\n\n    playerModalFromMenu.show();\n}\n\n/**\n * Open a new menu modal. This will be a menu of series for a collection.\n * @param {Event} e The event object.\n */\nfunction openNewMenuModal(e) {\n    const menuItem = e.target.closest('.menu-item');\n    const externalRef = menuItem.getAttribute('data-externalref');\n    const instanceName = menuItem.querySelector('.menu-item-title > .searchable').innerHTML;\n\n    window.type = 'series';\n    newMenuModal = new ModalForm({\n        formClass: 'mod_clearlesson\\\\forms\\\\incourse_menu_form',\n        args: {cmid: window.cmid,\n                course: window.courseid,\n                url: url,\n                firstload: firstLoad,\n                externalref: externalRef,\n                level: 2},\n        modalConfig: {title: instanceName},\n    });\n\n    newMenuModal.addEventListener(newMenuModal.events.LOADED, function() {\n        console.log(window.type);\n        const modalRootInner = newMenuModal.modal.getRoot()[0].children[0];\n        setModalFullscreen(modalRootInner);\n        Utils.waitForElement('.incourse-menu', modalRootInner, async function() {\n            if (window.updateProgress) {\n                await updateProgressAndActivity(); // Record any progress from the last player.\n            }\n            window.updateProgress = false;\n        });\n        updateCompletionStatusIfIncorrect(completionDropdown, modalRootInner);\n    });\n\n    newMenuModal.show();\n}\n\n/**\n * Set the modal to nearly fullscreen size.\n * @param {HTMLelement} modalRootInner The root of the modal.\n */\nfunction setModalFullscreen(modalRootInner) {\n    let modalHeight = Math.ceil(window.innerHeight * 0.94);\n    let modalWidth = Math.ceil(window.innerWidth * 0.94);\n    modalWidth = modalWidth > 1800 ? 1800 : modalWidth;\n    modalRootInner.setAttribute('style',\n        'width: ' + modalWidth +\n        'px;max-width: ' + modalWidth +\n        'px;height: ' + modalHeight +\n        'px;max-height: ' + modalHeight + 'px;'\n    );\n}\n\n/**\n * Set the modal buttons.\n * @param {HMTLelement} modalRootInner The root of the modal.\n */\nfunction setModalButtons(modalRootInner) {\n    Utils.waitForElement('.modal-footer button.btn-primary', modalRootInner, async function() {\n        const saveButton = modalRootInner.querySelector('.modal-footer button.btn-primary');\n        saveButton.classList.add('d-none');\n        const cancelButton = modalRootInner.querySelector('.modal-footer button.btn-secondary');\n        cancelButton.innerHTML = backString;\n    });\n}\n\n/**\n * Update the completion status if it is incorrect.\n * @param {HTMLelement} completionDropdown The completion dropdown/button (may not be present).\n * @param {HTMLelement} modalRootInner The root of the modal.\n */\nfunction updateCompletionStatusIfIncorrect(completionDropdown, modalRootInner) {\n    if (completionDropdown) {\n        if (completionDropdown.classList.contains('btn-success')) {\n            moodleCompleted = true;\n        } else {\n            moodleCompleted = false;\n        }\n        Utils.waitForElement('.incourse', modalRootInner, async function() {\n            if (modalRootInner.querySelector('.incourse').getAttribute('data-watchedall') == '1') {\n                window.viewedStatus = 'watched';\n                window.updateProgress = false;\n                if (!moodleCompleted) {\n                    // All the videos have been watched but the activity has not been marked as complete.\n                    // If the completionwatchedall rule is enabled, we can mark the activity as complete.\n                    const watchdAllRuleString = await getString('watchedallrule', 'mod_clearlesson');\n                    if (completionDropdown.outerHTML.includes(watchdAllRuleString)) {\n                        window.currentTime = 0;\n                        window.resourceRef = modalRootInner.querySelector('.incourse').getAttribute('data-resourceref');\n                        window.extref = '';\n                        await updateProgressAndActivity(); // We ignore window.updateProgress here.\n                    }\n                }\n            }\n        });\n    }\n}"],"names":["url","playerModal","formClass","backString","modalType","moodleCompleted","playerModalFromMenu","newMenuModal","completionDropdown","setWindowWatched","watchedCheck","document","querySelector","window","updateProgress","classList","contains","setModalFullscreen","modalRootInner","modalHeight","Math","ceil","innerHeight","modalWidth","innerWidth","setAttribute","setModalButtons","Utils","waitForElement","async","add","innerHTML","updateCompletionStatusIfIncorrect","getAttribute","viewedStatus","watchdAllRuleString","outerHTML","includes","currentTime","resourceRef","extref","openPlayer","e","type","target","href","preventDefault","elementAncestor","closest","cmid","split","searchParams","URLSearchParams","location","search","courseid","get","instanceNameElement","span","removeChild","instanceName","innerText","ModalForm","args","course","firstload","level","modalConfig","title","addEventListener","events","LOADED","modal","getRoot","children","call","methodname","done","response","activitymodulehtml","show","element","parentElement","_element$parentElemen","_element$classList2","_element$parentElemen2","console","log","externalRef","externalref","openPlayerFromMenu","menuItem","openNewMenuModal","position","formParams","serialFormParams","serialize","bodyContent","getBody","setBodyContent","reRenderPlayerModal","parseInt"],"mappings":";;;;;;;;;SA+BIA,IAAKC,YAAaC,UAAWC,WAAYC,UAAWC,gBAAiBC,oBAAqBC,aAAcC,q1BA4InGC,yBACCC,aAAeC,SAASC,cAAc,kDAE5CC,OAAOC,eAAiBJ,MAAAA,oBAAAA,aAAcK,UAAUC,SAAS,uBAsFpDC,mBAAmBC,oBACpBC,YAAcC,KAAKC,KAA0B,IAArBR,OAAOS,aAC/BC,WAAaH,KAAKC,KAAyB,IAApBR,OAAOW,YAClCD,WAAaA,WAAa,KAAO,KAAOA,WACxCL,eAAeO,aAAa,QACxB,UAAYF,WACZ,iBAAmBA,WACnB,cAAgBJ,YAChB,kBAAoBA,YAAc,gBAQjCO,gBAAgBR,gBACrBS,MAAMC,eAAe,mCAAoCV,gBAAgBW,iBAClDX,eAAeN,cAAc,oCACrCG,UAAUe,IAAI,UACJZ,eAAeN,cAAc,sCACrCmB,UAAY5B,uBASxB6B,kCAAkCxB,mBAAoBU,gBACvDV,qBAEIH,kBADAG,mBAAmBO,UAAUC,SAAS,eAK1CW,MAAMC,eAAe,YAAaV,gBAAgBW,oBACmC,KAA7EX,eAAeN,cAAc,aAAaqB,aAAa,qBACvDpB,OAAOqB,aAAe,UACtBrB,OAAOC,gBAAiB,GACnBT,iBAAiB,OAGZ8B,0BAA4B,mBAAU,iBAAkB,mBAC1D3B,mBAAmB4B,UAAUC,SAASF,uBACtCtB,OAAOyB,YAAc,EACrBzB,OAAO0B,YAAcrB,eAAeN,cAAc,aAAaqB,aAAa,oBAC5EpB,OAAO2B,OAAS,SACV,oEAlRV,KAEhB3B,OAAO4B,WAAaZ,MAAMa,EAAGC,WACrBD,EAAEE,OAAOC,KAAKR,SAAS,eAAgB,CACvCK,EAAEI,iBACF3C,iBAAmB,mBAAU,cACvB4C,gBAAkBL,EAAEE,OAAOI,QAAQ,aAEzCnC,OAAOoC,KAAOF,gBAAgBnC,cAAc,mBACPqB,aAAa,QAAQiB,MAAM,OAAO,GAEvErC,OAAO8B,KAAOA,WACRQ,aAAe,IAAIC,gBAAgBvC,OAAOwC,SAASC,QACzDtD,IAAM0C,EAAEE,OAAOC,KACfhC,OAAO0C,SAAWJ,aAAaK,IAAI,YAC7BC,oBAAsBV,gBAAgBnC,cAAc,+BACpD8C,KAAOD,oBAAoB7C,cAAc,QAC3C8C,MACAD,oBAAoBE,YAAYD,YAE9BE,aAAeH,oBAAoBI,UAE5B,WAATlB,MAA8B,gBAATA,MACrBzC,UAAY,6CACZE,UAAY,SAEZF,UAAY,+CACZE,UAAY,WAGhBH,YAAc,IAAI6D,mBAAU,CACxB5D,UAAWA,UACX6D,KAAM,CAACd,KAAMpC,OAAOoC,KACZe,OAAQnD,OAAO0C,SACfvD,IAAKA,IACLiE,UAtCR,EAuCQC,MAAO,GACfC,YAAa,CAACC,MAAOR,iBAGbS,iBAAiBpE,YAAYqE,OAAOC,QAAQ,iBAC9CrD,eAAiBjB,YAAYuE,MAAMC,UAAU,GAAGC,SAAS,GAClD,SAAT/B,MACA1B,mBAAmBC,gBAGL,WAAdd,WACAuB,MAAMC,eAAe,mBAAoBV,gBAAgBW,iBACjDhB,OAAOC,sBACD,gDAGVD,OAAO0B,YAAc5B,SAASC,cAAc,oBAAoBqB,aAAa,oBAC7EpB,OAAO8B,KAAOhC,SAASC,cAAc,oBAAoBqB,aAAa,aACtExB,sBAIU,SAAdL,WACAuB,MAAMC,eAAe,mBAAoBV,gBAAgBW,iBACjDhB,OAAOC,sBACD,gDAEVD,OAAOC,gBAAiB,KAQhCkB,kCADAxB,mBAAqBuC,gBAAgBnC,cAAc,wBACGM,gBAEtDQ,gBAAgBR,8BAEXyD,KAAK,CAAC,CACPC,WAAY,uCACZb,KAAM,CAACR,SAAU1C,OAAO0C,SAAUN,KAAMpC,OAAOoC,MAC/C4B,KAAM,SAASC,UAEXpC,EAAEE,OAAOI,QAAQ,aAAaZ,UAAY0C,SAASC,0BAK/D9E,YAAY+E,SAIpBrE,SAAS0D,iBAAiB,SAASxC,eAAea,iGACxCuC,QAAUvC,EAAEE,mCACdqC,QAAQlE,4DAAWC,SAAS,4CAC7BiE,QAAQC,cAAcnE,4CAAtBoE,sBAAiCnE,SAAS,0CAC1CiE,QAAQlE,0CAARqE,oBAAmBpE,SAAS,qDAC5BiE,QAAQC,cAAcnE,6CAAtBsE,uBAAiCrE,SAAS,wBACzC0B,EAAEI,iBACEmC,QAAQlE,UAAUC,SAAS,yBAC5BiE,QAAQC,cAAcnE,UAAUC,SAAS,wBACE,cAAtCiE,QAAQhD,aAAa,cAC8B,cAApDgD,QAAQC,cAAcjD,aAAa,cAElCqD,QAAQC,IAAI,qBA6CJ7C,SAClBK,gBAAkBL,EAAEE,OAAOI,QAAQ,cACnCY,aAAeb,gBAAgBnC,cAAc,kCAAkCmB,UAC/EyD,YAAczC,gBAAgBd,aAAa,oBACjDpB,OAAO8B,KAAO,aACdrC,oBAAsB,IAAIwD,mBAAU,CAChC5D,UAAW,+CACX6D,KAAM,CAACd,KAAMpC,OAAOoC,KACZe,OAAQnD,OAAO0C,SACfvD,IAAKA,IACLiE,UA/JA,EAgKAwB,YAAaD,YACbtB,MAAO,GACfC,YAAa,CAACC,MAAOR,iBAGLS,iBAAiB/D,oBAAoBgE,OAAOC,QAAQ,iBAC9DrD,eAAiBZ,oBAAoBkE,MAAMC,UAAU,GAAGC,SAAS,GACvEzD,mBAAmBC,gBAEnBS,MAAMC,eAAe,mBAAoBV,gBAAgBW,iBACjDhB,OAAOC,sBACD,gDAGVD,OAAO0B,YAAc5B,SAASC,cAAc,oBAAoBqB,aAAa,oBAC7EpB,OAAO8B,KAAOhC,SAASC,cAAc,oBAAoBqB,aAAa,aACtExB,sBAGJuB,kCAAkCxB,mBAAoBU,gBAEtDQ,gBAAgBR,mBAGpBZ,oBAAoB0E,OA/EJU,CAAmBhD,KAGnB4C,QAAQC,IAAI,qBAmFN7C,SAChBiD,SAAWjD,EAAEE,OAAOI,QAAQ,cAC5BwC,YAAcG,SAAS1D,aAAa,oBACpC2B,aAAe+B,SAAS/E,cAAc,kCAAkCmB,UAE9ElB,OAAO8B,KAAO,UACdpC,aAAe,IAAIuD,mBAAU,CACzB5D,UAAW,6CACX6D,KAAM,CAACd,KAAMpC,OAAOoC,KACZe,OAAQnD,OAAO0C,SACfvD,IAAKA,IACLiE,UA1MA,EA2MAwB,YAAaD,YACbtB,MAAO,GACfC,YAAa,CAACC,MAAOR,iBAGZS,iBAAiB9D,aAAa+D,OAAOC,QAAQ,WACtDe,QAAQC,IAAI1E,OAAO8B,YACbzB,eAAiBX,aAAaiE,MAAMC,UAAU,GAAGC,SAAS,GAChEzD,mBAAmBC,gBACnBS,MAAMC,eAAe,iBAAkBV,gBAAgBW,iBAC/ChB,OAAOC,sBACD,gDAEVD,OAAOC,gBAAiB,KAE5BkB,kCAAkCxB,mBAAoBU,mBAG1DX,aAAayE,OAhHGY,CAAiBlD,mBAmBFmD,SAAU7F,WACnC8F,WAAa,CAAC7C,KAAMpC,OAAOoC,KAAMe,OAAQnD,OAAO0C,SAAUvD,IAAKA,IAAK6F,SAAUA,SAAU5B,WAAW,GACnG8B,iBAAmBpE,MAAMqE,UAAUF,YACnCG,YAAchG,YAAYiG,QAAQH,wBAClC9F,YAAYuE,MAAM2B,eAAeF,aACvCxF,mBAjBY2F,CADWC,SAASpB,QAAQjC,QAAQ,iBAAiBf,aAAa,kBACpCjC"}