{"version":3,"file":"course-page.min.js","sources":["../src/course-page.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A set of functions to be added to charts tab load-tabs.js.\n * Most of these functions enable modal forms for the adding/deleting of charts or editing existing charts.\n *\n * @module     mod_clearlesson/course-page\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport ModalForm from 'core_form/modalform';\nimport * as Utils from './utils';\nimport * as progressTracker from './progress-tracker';\nimport Ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport * as pageFunctions from './page-functions';\n\n// eslint-disable-next-line no-unused-vars\nvar url, playerModal, formClass, backString, modalType, playerModalFromMenu, newMenuModal, completionInfoElement;\nvar firstLoad = 1;\n\nexport const init = () => {\n    var position = 1;\n    window.pageType = 'course';\n    window.openPlayer = async(e, type) => {\n        if (e.target.href.includes('clearlesson')) {\n            e.preventDefault();\n            backString = await getString('back');\n            const elementAncestor = e.target.closest('.activity');\n            completionInfoElement = elementAncestor.querySelector('.completion-dropdown button');\n            // Used in the progress tracker as well as on this page.\n            window.cmid = elementAncestor.querySelector('.activityname a')\n                                                .getAttribute('href').split('id=')[1];\n\n            const searchParams = new URLSearchParams(window.location.search);\n            url = e.target.href;\n            window.courseid = searchParams.get('id'); // Used in the progress tracker as well as on this page.\n            const instanceNameElement = elementAncestor.querySelector('.activityname .instancename');\n            const span = instanceNameElement.querySelector('span');\n            if (span) {\n                instanceNameElement.removeChild(span);\n            }\n            const instanceName = instanceNameElement.innerText;\n\n            if (type === 'series' || type === 'collections') {\n                formClass = 'mod_clearlesson\\\\forms\\\\incourse_menu_form';\n                modalType = 'menu';\n            } else {\n                formClass = 'mod_clearlesson\\\\forms\\\\incourse_player_form';\n                modalType = 'player';\n            }\n\n            if (window.updateProgress) {\n                await progressTracker.updateProgressAndActivity(); // Record any progress from the last player.\n            }\n\n            playerModal = new ModalForm({\n                formClass: formClass,\n                args: {cmid: window.cmid,\n                        course: window.courseid,\n                        url: url,\n                        firstload: firstLoad},\n                modalConfig: {title: instanceName},\n            });\n\n            playerModal.addEventListener(playerModal.events.LOADED, function() {\n                const modalRootInner = playerModal.modal.getRoot()[0].children[0];\n                // Store the resource reference for the progress tracker.\n                pageFunctions.setModalButtons(modalRootInner, backString);\n                pageFunctions.setModalBodyGrey(modalRootInner);\n\n                if (type !== 'play') {\n                    pageFunctions.setModalFullscreen(modalRootInner);\n                }\n\n                if (modalType === 'player') {\n                    Utils.waitForElement('.incourse-player', modalRootInner, async function() {\n                        // Store the resource reference and resource type for the progress tracker.\n                        // These are only set from the base layer.\n                        window.resourceRef = modalRootInner.querySelector('.incourse-player').getAttribute('data-resourceref');\n                        pageFunctions.updateCompletionStatusIfIncorrect(completionInfoElement, modalRootInner);\n                        window.type = document.querySelector('.incourse-player').getAttribute('data-type');\n                        pageFunctions.setWindowWatched();\n                        firstLoad = 0;\n                    });\n                }\n\n                if (modalType === 'menu') {\n                    Utils.waitForElement('.incourse-menu', modalRootInner, async function() {\n                        // Store the resource reference and resource type for the progress tracker.\n                        // These are only set from the base layer.\n                        window.resourceRef = modalRootInner.querySelector('.incourse-menu').getAttribute('data-resourceref');\n                        window.type = document.querySelector('.incourse-menu').getAttribute('data-type');\n                        pageFunctions.updateCompletionStatusIfIncorrect(completionInfoElement, modalRootInner);\n                        window.updateProgress = false;\n                    });\n                }\n\n                Ajax.call([{\n                    methodname: 'mod_clearlesson_course_module_viewed',\n                    args: {courseid: window.courseid, cmid: window.cmid},\n                    done: function(response) {\n                        // Update the entire activity module html, this update the completion status if present.\n                        e.target.closest('.activity').outerHTML = response.activitymodulehtml;\n                    }\n                }]);\n            });\n\n            playerModal.show();\n        }\n    };\n\n    document.addEventListener('click', async function(e) {\n        const element = e.target;\n        if (element.classList?.contains('play-icon')\n        || element.parentElement.classList?.contains('play-icon')\n        || element.classList?.contains('video-player-link')\n        || element.parentElement.classList?.contains('video-player-link')) {\n            e.preventDefault();\n            if (element.classList.contains('incourse-player-link')\n            || element.parentElement.classList.contains('incourse-player-link')) {\n                if (element.getAttribute('data-type') === 'playlists'\n                || element.parentElement.getAttribute('data-type') === 'playlists') {\n                    // 2nd level modals.\n                    playerModalFromMenu = await pageFunctions.openPlayerFromMenu(e,\n                                                                                url,\n                                                                                firstLoad,\n                                                                                completionInfoElement,\n                                                                                backString);\n                } else {\n                    // For collections we'll open the series menu.\n                    newMenuModal = await pageFunctions.openNewMenuModal(e, url, firstLoad, completionInfoElement);\n                }\n            } else {\n                position = parseInt(element.closest('.has-position').getAttribute('data-position'));\n                reRenderCoursePlayerModal(position, url);\n            }\n        }\n    });\n};\n\n/**\n * Open the player modal.\n *\n * @param {Number} position The position of the resource in the list.\n * @param {String} url The URL of the resource.\n */\nasync function reRenderCoursePlayerModal(position, url) {\n    if (window.updateProgress) {\n        await progressTracker.updateProgressAndActivity(); // Record any progress from the last player.\n    }\n    const formParams = {cmid: window.cmid, course: window.courseid, url: url, position: position, firstload: 0};\n    const serialFormParams = Utils.serialize(formParams);\n    const bodyContent = playerModal.getBody(serialFormParams);\n    await playerModal.modal.setBodyContent(bodyContent);\n    pageFunctions.setWindowWatched();\n}"],"names":["url","playerModal","formClass","backString","modalType","completionInfoElement","firstLoad","window","pageType","openPlayer","async","e","type","target","href","includes","preventDefault","elementAncestor","closest","querySelector","cmid","getAttribute","split","searchParams","URLSearchParams","location","search","courseid","get","instanceNameElement","span","removeChild","instanceName","innerText","updateProgress","progressTracker","updateProgressAndActivity","ModalForm","args","course","firstload","modalConfig","title","addEventListener","events","LOADED","modalRootInner","modal","getRoot","children","pageFunctions","setModalButtons","setModalBodyGrey","setModalFullscreen","Utils","waitForElement","resourceRef","updateCompletionStatusIfIncorrect","document","setWindowWatched","call","methodname","done","response","outerHTML","activitymodulehtml","show","element","classList","contains","parentElement","_element$parentElemen","_element$classList2","_element$parentElemen2","openPlayerFromMenu","openNewMenuModal","position","formParams","serialFormParams","serialize","bodyContent","getBody","setBodyContent","reRenderCoursePlayerModal","parseInt"],"mappings":"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"}