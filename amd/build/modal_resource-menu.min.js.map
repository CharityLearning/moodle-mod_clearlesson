{"version":3,"file":"modal_resource-menu.min.js","sources":["../src/modal_resource-menu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A set of functions to be added to charts tab load-tabs.js.\n * Most of these functions enable modal forms for the adding/deleting of charts or editing existing charts.\n *\n * @module     mod_clearlesson/modal-resource-menu\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport * as Utils from './utils';\n\nvar currentMenuForm;\nexport const init = () => {\n    document.addEventListener('click', function(e) {\n        var element, externalref;\n        if (element?.classList?.contains('view-icon')) {\n            element = e.target;\n            externalref = element.getAttribute('data-externalref');\n        } else if (element?.parentElement?.classList?.contains('view-icon')) {\n            element = e.target.parentElement;\n            externalref = element.getAttribute('data-externalref');\n        }\n\n        if (externalref) {\n            e.preventDefault();\n            console.log('Externalref found: ' + externalref);\n            // openResourceMenu(externalref);\n        } else {\n            console.log('No externalref found');\n        }\n    });\n};\n\n/**\n * Open the resource menu modal.\n * @param {String} externalref\n */\nfunction openResourceMenu(externalref) {\n    const resourceType = document.getElementsByClassName('disabled-looking')[0].getAttribute('data-type');\n    const cmid = document.querySelector('input[name=\"coursemodule\"]').value;\n    const courseid = document.querySelector('input[name=\"course\"]').value;\n    const url = window.location.href;\n    var titleString, selectString;\n\n    switch (resourceType) {\n        case 'playlists':\n            titleString = getString('playlistmenu', 'mod_clearlesson');\n            selectString = getString('selectplaylist', 'mod_clearlesson');\n            break;\n        case 'speakers':\n            titleString = getString('speakermenu', 'mod_clearlesson');\n            selectString = getString('selectspeaker', 'mod_clearlesson');\n            break;\n        case 'topcis':\n            titleString = getString('topicmenu', 'mod_clearlesson');\n            selectString = getString('selecttopic', 'mod_clearlesson');\n            break;\n        case 'series':\n            titleString = getString('seriesmenu', 'mod_clearlesson');\n            selectString = getString('selectseries', 'mod_clearlesson');\n            break;\n        case 'collections':\n            titleString = getString('collectionmenu', 'mod_clearlesson');\n            selectString = getString('selectcollection', 'mod_clearlesson');\n            break;\n    }\n\n    const menuForm = new ModalForm({\n        formClass: 'mod_clearlesson\\\\forms\\\\resource_player_form',\n        args: {type: resourceType, cmid: cmid, course: courseid, url: url, externalref: externalref, position: 1},\n        modalConfig: {title: titleString, saveButtonText: selectString},\n    });\n\n    currentMenuForm = menuForm;\n\n    menuForm.addEventListener(menuForm.events.LOADED, async function() {\n        // Set the modal to nearly fullscreen size.\n        let modalHeight = Math.ceil(window.innerHeight * 0.94);\n        let modalWidth = Math.ceil(window.innerWidth * 0.94);\n        modalWidth = modalWidth > 1800 ? 1800 : modalWidth;\n        const modalRootInner = menuForm.modal.getRoot()[0].children[0];\n        modalRootInner.setAttribute('style',\n            'width: ' + modalWidth +\n            'px;max-width: ' + modalWidth +\n            'px;height: ' + modalHeight +\n            'px;max-height: ' + modalHeight + 'px;'\n        );\n\n        let saveString = await selectString;\n        Utils.waitForElement('.modal-footer button.btn-primary', modalRootInner, function() {\n            const saveButton = modalRootInner.querySelector('.modal-footer button.btn-primary');\n            saveButton.innerHTML = saveString;\n            saveButton.setAttribute('data-action', 'select');\n            saveButton.setAttribute('data-type', resourceType);\n            saveButton.setAttribute('data-externalref', externalref);\n            saveButton.classList.add('d-block');\n        });\n    });\n\n    menuForm.show();\n}"],"names":["document","addEventListener","e","element","externalref","_element","classList","_element$classList","contains","target","getAttribute","_element2","parentElement","_element2$parentEleme","_element2$parentEleme2","preventDefault","console","log"],"mappings":";;;;;;;;;2kCA8BoB,KAChBA,SAASC,iBAAiB,SAAS,SAASC,0FACpCC,QAASC,6BACTD,wDAAAE,SAASC,yCAATC,mBAAoBC,SAAS,aAE7BJ,aADAD,QAAUD,EAAEO,QACUC,aAAa,sCAC5BP,4DAAAQ,UAASC,+EAATC,sBAAwBP,6CAAxBQ,uBAAmCN,SAAS,eAEnDJ,aADAD,QAAUD,EAAEO,OAAOG,eACGF,aAAa,qBAGnCN,aACAF,EAAEa,iBACFC,QAAQC,IAAI,sBAAwBb,cAGpCY,QAAQC,IAAI"}