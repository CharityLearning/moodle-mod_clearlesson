{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Utils for mod_clearlesson.\n *\n * @module     mod_clearlesson/utils\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\n/**\n * Observe one element for another then call a callback.\n * @param {string} checkElementSelector\n * @param {HTMLelement} watchElement\n * @param {function} callBack\n */\nexport const waitForElement = (checkElementSelector, watchElement, callBack) => {\n    if (watchElement) {\n        waitForElementInner(checkElementSelector, watchElement, callBack);\n    } else {\n        waitForElementInner(watchElement, document.body, function() {\n            waitForElementInner(checkElementSelector, watchElement, callBack);\n        });\n    }\n};\n\n/**\n * @param {string} checkElementSelector\n * @param {HTMLelement} watchElement\n * @param {function} callBack\n */\nfunction waitForElementInner(checkElementSelector, watchElement, callBack) {\n    let checkElement = watchElement.querySelector(checkElementSelector);\n    if (checkElement) {\n        callBack();\n    } else {\n        let observer = new MutationObserver((mutationList, observer) => {\n            let checkElement = watchElement.querySelector(checkElementSelector);\n            if (checkElement) {\n                observer.disconnect();\n                callBack();\n            }\n        });\n        observer.observe(watchElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n}\n\n/**\n * Stolen from core_form/util.js\n * Unfortunately, we cannot import this function from core_form/util.js at present\n *\n * @param {Object} data\n * @param {String} prefix\n */\nexport const serialize = (data, prefix = '') => [\n    ...Object.entries(data).map(([index, value]) => {\n        const key = prefix ? `${prefix}[${index}]` : index;\n        return (value !== null && typeof value === \"object\") ? serialize(value, key) : `${key}=${encodeURIComponent(value)}`;\n    })\n].join(\"&\");"],"names":["waitForElementInner","checkElementSelector","watchElement","callBack","querySelector","MutationObserver","mutationList","observer","disconnect","observe","childList","subtree","document","body","serialize","data","prefix","Object","entries","map","_ref","index","value","key","encodeURIComponent","join"],"mappings":"kLA6CSA,oBAAoBC,qBAAsBC,aAAcC,aAC1CD,aAAaE,cAAcH,sBAE1CE,eACG,CACY,IAAIE,kBAAiB,CAACC,aAAcC,YAC5BL,aAAaE,cAAcH,wBAE1CM,SAASC,aACTL,eAGCM,QAAQP,aAAc,CAC3BQ,WAAW,EACXC,SAAS,6BA7BS,CAACV,qBAAsBC,aAAcC,YAC3DD,aACAF,oBAAoBC,qBAAsBC,aAAcC,UAExDH,oBAAoBE,aAAcU,SAASC,MAAM,WAC7Cb,oBAAoBC,qBAAsBC,aAAcC,oBAoCvDW,UAAY,SAACC,UAAMC,8DAAS,SAAO,IACzCC,OAAOC,QAAQH,MAAMI,KAAIC,WAAEC,MAAOC,kBAC3BC,IAAMP,iBAAYA,mBAAUK,WAAWA,aAC3B,OAAVC,OAAmC,iBAAVA,MAAsBR,UAAUQ,MAAOC,eAAUA,gBAAOC,mBAAmBF,YAElHG,KAAK"}