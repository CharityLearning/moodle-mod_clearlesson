{"version":3,"file":"page-functions.min.js","sources":["../src/page-functions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A set of functions to be used in bot course-page.js and module-page.js\n *\n * @module     mod_clearlesson/page-functions\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport * as Utils from './utils';\nimport * as progressTracker from './progress-tracker';\nimport {get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\n/**\n * Update the completion status if it is incorrect.\n * @param {HTMLelement} completionInfoElement The completion info element. (May not be present).\n * @param {HTMLelement} pageClearlessonElement The root of the modal.\n */\nexport function updateCompletionStatusIfIncorrect(completionInfoElement, pageClearlessonElement) {\n    var moodleCompleted, ruleCheckElement;\n    if (completionInfoElement) {\n        if (window.pageType === 'course') {\n            ruleCheckElement = completionInfoElement.nextElementSibling;\n            if (completionInfoElement.classList.contains('btn-success')) {\n                moodleCompleted = true;\n            } else {\n                moodleCompleted = false;\n            }\n        }\n        if (window.pageType === 'activity') {\n            ruleCheckElement = completionInfoElement;\n            moodleCompleted = true;\n            for (const condition of completionInfoElement.children) {\n                if (!condition.classList.contains('alert-success')) {\n                    moodleCompleted = false;\n                    break;\n                }\n            }\n        }\n\n\n        Utils.waitForElement('.incourse', pageClearlessonElement, async function() {\n            if (pageClearlessonElement.querySelector('.incourse').getAttribute('data-watchedall') == '1') {\n                window.watchedAll = true;\n                window.updateProgress = false;\n                if (!moodleCompleted) {\n                    // If the completionwatchedall rule is enabled, we can mark the activity as complete.\n                    const watchdAllRuleString = await getString('watchedallrule', 'mod_clearlesson');\n                    if (ruleCheckElement.outerHTML.includes(watchdAllRuleString)) {\n                        window.currentTime = 0;\n                        window.extref = '';\n                        progressTracker.updateProgressAndActivity(); // We ignore window.updateProgress here.\n                    }\n                }\n            } else {\n                window.watchedAll = false;\n            }\n        });\n    }\n}\n\n/**\n * Set the modal buttons.\n * @param {HMTLelement} modalRootInner The root of the modal.\n * @param {string} backString The string to use for the back button.\n */\nexport function setModalButtons(modalRootInner, backString) {\n    Utils.waitForElement('.modal-footer button.btn-primary', modalRootInner, async function() {\n        const saveButton = modalRootInner.querySelector('.modal-footer button.btn-primary');\n        saveButton.classList.add('d-none');\n        const cancelButton = modalRootInner.querySelector('.modal-footer button.btn-secondary');\n        cancelButton.innerHTML = backString;\n    });\n}\n\n/**\n * Set the modal to nearly fullscreen size.\n * @param {HTMLelement} modalRootInner The root of the modal.\n */\nexport function setModalFullscreen(modalRootInner) {\n    let modalHeight = Math.ceil(window.innerHeight * 0.94);\n    let modalWidth = Math.ceil(window.innerWidth * 0.94);\n    modalWidth = modalWidth > 1800 ? 1800 : modalWidth;\n    modalRootInner.setAttribute('style',\n        'width: ' + modalWidth +\n        'px;max-width: ' + modalWidth +\n        'px;height: ' + modalHeight +\n        'px;max-height: ' + modalHeight + 'px;'\n    );\n}\n\n/**\n * Open the player modal from the menu item.\n * @param {Event} e The event object.\n * @param {string} url The URL to use for the AJAX call.\n * @param {number} firstLoad The first load flag.\n * @param {HTMLelement} completionDropdown The completion dropdown/button (may not be present).\n * @param {string} backString The string to use for the back button.\n */\nexport async function openPlayerFromMenu(e, url, firstLoad, completionDropdown, backString) {\n    var playerModalFromMenu;\n    const elementAncestor = e.target.closest('.menu-item');\n    const instanceName = elementAncestor.querySelector('.menu-item-title > .searchable').innerHTML;\n    const externalRef = elementAncestor.getAttribute('data-externalref');\n\n    if (window.updateProgress) {\n        progressTracker.updateProgressAndActivity(); // Record any progress from the last player.\n    }\n\n    playerModalFromMenu = new ModalForm({\n        formClass: 'mod_clearlesson\\\\forms\\\\incourse_player_form',\n        args: {cmid: window.cmid,\n                course: window.courseid,\n                url: url,\n                firstload: firstLoad,\n                externalref: externalRef},\n        modalConfig: {title: instanceName},\n    });\n\n    playerModalFromMenu.addEventListener(playerModalFromMenu.events.LOADED, function() {\n        const modalRootInner = playerModalFromMenu.modal.getRoot()[0].children[0];\n        setModalFullscreen(modalRootInner);\n        setModalBodyGrey(modalRootInner);\n\n        Utils.waitForElement('.incourse-player', modalRootInner, async function() {\n            setWindowWatched();\n            firstLoad = 0;\n        });\n\n        // updateCompletionStatusIfIncorrect(completionDropdown, modalRootInner);\n        setModalButtons(modalRootInner, backString);\n    });\n\n    playerModalFromMenu.show();\n    return playerModalFromMenu;\n}\n\n/**\n * Open a new menu modal. This will be a menu of series for a collection.\n * @param {Event} e The event object.\n * @param {string} url The URL to use for the AJAX call.\n * @param {number} firstLoad The first load flag.\n * @param {HTMLelement} completionDropdown The completion dropdown/button (may not be present).\n * @param {string} backString The string to use for the back button.\n */\nexport async function openNewMenuModal(e, url, firstLoad, completionDropdown, backString) {\n    var newMenuModal;\n    const menuItem = e.target.closest('.menu-item');\n    const externalRef = menuItem.getAttribute('data-externalref');\n    const instanceName = menuItem.querySelector('.menu-item-title > .searchable').innerHTML;\n\n    if (window.updateProgress) {\n        progressTracker.updateProgressAndActivity(); // Record any progress from the last player.\n    }\n\n    newMenuModal = new ModalForm({\n        formClass: 'mod_clearlesson\\\\forms\\\\incourse_menu_form',\n        args: {cmid: window.cmid,\n                course: window.courseid,\n                url: url,\n                firstload: firstLoad,\n                externalref: externalRef},\n        modalConfig: {title: instanceName},\n    });\n\n    newMenuModal.addEventListener(newMenuModal.events.LOADED, function() {\n        const modalRootInner = newMenuModal.modal.getRoot()[0].children[0];\n        setModalBodyGrey(modalRootInner);\n        setModalButtons(modalRootInner, backString);\n        // updateCompletionStatusIfIncorrect(completionDropdown, modalRootInner);\n        window.updateProgress = false;\n    });\n\n    newMenuModal.show();\n    return newMenuModal;\n}\n\n/**\n * Set the watched status of the window.\n */\nexport function setWindowWatched() {\n    const watchedCheck = document.querySelector('.incourse-player .player-column .video-title-wrapper .watched-check');\n    // If the video has been watched already dont update the progress.\n    window.updateProgress = watchedCheck?.classList.contains('notwatched');\n}\n\n/**\n * Set the modal body to grey background.\n * @param {HTMLelement} modalRootInner The root of the modal.\n */\nexport function setModalBodyGrey(modalRootInner) {\n    modalRootInner.querySelector('.modal-body').classList.add('mod-clearlesson-backgrounddgrey');\n}"],"names":["setModalButtons","modalRootInner","backString","Utils","waitForElement","async","querySelector","classList","add","innerHTML","setModalFullscreen","modalHeight","Math","ceil","window","innerHeight","modalWidth","innerWidth","setAttribute","setWindowWatched","watchedCheck","document","updateProgress","contains","setModalBodyGrey","e","url","firstLoad","completionDropdown","newMenuModal","menuItem","target","closest","externalRef","getAttribute","instanceName","progressTracker","updateProgressAndActivity","ModalForm","formClass","args","cmid","course","courseid","firstload","externalref","modalConfig","title","addEventListener","events","LOADED","modal","getRoot","children","show","playerModalFromMenu","elementAncestor","completionInfoElement","pageClearlessonElement","moodleCompleted","ruleCheckElement","pageType","nextElementSibling","condition","watchedAll","watchdAllRuleString","outerHTML","includes","currentTime","extref"],"mappings":"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"}