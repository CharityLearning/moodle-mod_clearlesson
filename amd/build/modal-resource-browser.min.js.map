{"version":3,"file":"modal-resource-browser.min.js","sources":["../src/modal-resource-browser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A set of functions to be added to charts tab load-tabs.js.\n * Most of these functions enable modal forms for the adding/deleting of charts or editing existing charts.\n *\n * @module     mod_clearlesson/modal-resource-browser\n * @copyright  2024 Dan Watkins <dwatkins@charitylearning.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\n\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport * as Utils from './utils';\n\nvar newResourceSelected = false;\nvar orderedResources = false;\nvar filterValues = {\n    animation: '',\n    speakers: '',\n    topics: '',\n    playlists: '',\n    series: '',\n    collections: '',\n};\nvar modalForm;\n\nexport const init = () => {\n    document.addEventListener('click', function(e) {\n        const element = e.target;\n        if (element.getAttribute('id') === 'resource-select-button') { // In the page form.\n            e.preventDefault();\n            openResourceBrowser();\n        }\n\n        if (element.classList?.contains('select-resource-button')) { // In the modal browser & menu.\n            e.preventDefault();\n            const externalref = element.getAttribute('data-externalref');\n            selectResource(externalref, e.target.getAttribute('data-type'));\n        }\n        if (element.classList?.contains('close')\n            || element.getAttribute('data-action') === 'cancel'\n            || element.getAttribute('data-action') === 'hide'\n            || element.parentElement.getAttribute('data-action') === 'hide') {\n                onModalClose();\n        }\n        searchIfSearchbutton(e);\n    });\n\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape') {\n            onModalClose();\n        }\n    });\n\n    document.addEventListener('change', async function(e) {\n        if (e.target?.getAttribute('id') === 'id_type') {\n            clearSelectedResource();\n        }\n        if (e.target?.classList.contains('browser-filter')) {\n            const filterName = e.target.getAttribute('name');\n            const seletedValue = e.target.value;\n            if (orderedResources) {\n                await clearOrdering();\n            }\n            await filterResources(filterName, seletedValue);\n            if (filterName === 'playlists' || filterName === 'series') {\n                orderFilteredResources(filterName, seletedValue);\n            }\n        }\n    });\n\n    document.addEventListener('keydown', function(e) {\n        // For enter, return or space key press while in the search input.\n        if (e.key === 'Enter' || e.key === 'Return') {\n            if (e.target?.getAttribute('id') === 'search') {\n                e.preventDefault();\n                searchResources(e.target.value);\n            }\n            searchIfSearchbutton(e);\n        }\n    });\n};\n\n/**\n * Check if the search button was activated.\n * If so, prevent the default action and search the resources.\n * @param {Event} e\n */\nfunction searchIfSearchbutton(e) {\n    if (e.target.classList?.contains('search-button-parent')\n        || e.target.classList?.contains('cl-search-append')\n        || e.target.classList?.contains('fa-search')) {\n        e.preventDefault();\n        searchResources(document.getElementById('search').value);\n    }\n}\n\n/**\n * Open the resoure browser modal form.\n */\nasync function openResourceBrowser() {\n    const resourceType = document.getElementById('id_type').value;\n    const cmid = document.querySelector('input[name=\"coursemodule\"]').value;\n    const courseid = document.querySelector('input[name=\"course\"]').value;\n    const url = window.location.href;\n    var lazyLoad = false;\n    if (resourceType === 'video') {\n        lazyLoad = true;\n    }\n\n    const browserForm = await new ModalForm({\n        formClass: 'mod_clearlesson\\\\forms\\\\resource_browser_form',\n        args: {type: resourceType, cmid: cmid, course: courseid, url: url, lazyload: lazyLoad},\n        modalConfig: {title: getString('resourcebrowser', 'mod_clearlesson')},\n    });\n\n    modalForm = browserForm;\n\n    browserForm.addEventListener(browserForm.events.LOADED, function() {\n        // Set the modal to nearly fullscreen size.\n        let modalHeight = Math.ceil(window.innerHeight * 0.94);\n        let modalWidth = Math.ceil(window.innerWidth * 0.94);\n        modalWidth = modalWidth > 1800 ? 1800 : modalWidth;\n        const modalRootInner = browserForm.modal.getRoot()[0].children[0];\n        modalRootInner.setAttribute('style',\n            'width: ' + modalWidth +\n            'px;max-width: ' + modalWidth +\n            'px;height: ' + modalHeight +\n            'px;max-height: ' + modalHeight + 'px;'\n        );\n        newResourceSelected = false;\n        setTimeout(function() {\n            // Hide the autocomplete while we are manipulating it.\n            document.querySelector('span[data-fieldtype=\"autocomplete\"').classList.add('d-none');\n        }, 100); // With a short delay to allow the modal to load first.\n\n        modalRootInner.addEventListener('click', function(e) {\n            if (e.target.classList.contains('type-button')) {\n                e.preventDefault();\n                const type = e.target.getAttribute('data-type');\n                viewResourceType(type, cmid, courseid, url, browserForm);\n            }\n        });\n\n        Utils.waitForElement('.modal-footer button.btn-primary', modalRootInner, function() {\n            modalRootInner.querySelector('.modal-footer button.btn-primary').classList.add('d-none');\n        });\n    });\n\n    browserForm.show();\n}\n\n/**\n * Select a resource from the browser modal.\n * When a user selects a resource from the modal, we capture the external ref and shut the modal.\n * We then create and add an autocomplete option for this resource to the list.\n * We then 'click' on this option, thus hijacking the autocomplete to select our resource.\n * Bur wont work unless the autocomplete is active.\n * This is done in the background when the browser modal is first opened.\n *\n * @param {String} externalref\n * @param {String} resourceType\n */\nexport function selectResource(externalref, resourceType) {\n    // Set the type of the resource in the form to match what was selected.\n    document.getElementById('id_type').value = resourceType;\n    // Well use this var in another function.\n    newResourceSelected = externalref;\n    const parent = document.getElementById('id_externalref').parentElement;\n    // Search for the selected resource in the autocomplete list.\n    const input = document.querySelector('input[id^=\"form_autocomplete_input\"]');\n    input.value = externalref;\n    input.dispatchEvent(\n        new Event(\"input\", {bubbles: true})\n    );\n    let suggestions = parent.parentElement.querySelector('ul.form-autocomplete-suggestions');\n    if (externalref) {\n        Utils.waitForElement('li[data-value=\"' + externalref + '\"]', suggestions.parentElement, function() {\n            // Once the option is loaded, click on it to select the resource.\n            document.querySelector('li[data-value=\"' + externalref + '\"]').click();\n            // We can close the modals now.\n            document.querySelectorAll('.modal-header button.close').forEach(function(button) {\n                button.click();\n            });\n        });\n    }\n}\n\n/**\n * Actions to take when the modal is closed.\n * If the autocomplete div is currently hidden because we are manipulating it,\n * we need to show it again when we are done with it.\n */\nfunction onModalClose() {\n    if (!newResourceSelected) {\n        // If the modal is closed without selecting a resource, we need to show the autocomplete.\n        document.querySelector('span[data-fieldtype=\"autocomplete\"').classList.remove('d-none');\n    } else {\n        const selectedOptionSelector =\n        '.form-autocomplete-selection span[role=\"option\"][data-value=\"' + newResourceSelected + '\"]';\n        const watch = document.getElementById('id_externalref').parentElement.parentElement;\n        Utils.waitForElement(selectedOptionSelector, watch, function() {\n            // Once we have have searched for and added the selected resouce,\n            // we can reveal the autocomplete, which is not going nuts anymore.\n            document.querySelector('span[data-fieldtype=\"autocomplete\"').classList.remove('d-none');\n        });\n    }\n}\n\n/**\n * Event listener for the resource type buttons.\n * This will essentially re-render the modal form with the new resource type.\n *\n * @param {String} type\n * @param {Number} cmid\n * @param {Number} courseid\n * @param {String} url\n * @param {ModalForm} browserForm\n * @param {String} externalref\n */\nasync function viewResourceType(type, cmid, courseid, url, browserForm, externalref = '') {\n    var lazyLoad = false;\n    if (type === 'play') {\n        lazyLoad = true;\n    }\n    var formParams = {type: type,\n                        cmid: cmid,\n                        course: courseid,\n                        url: url,\n                        lazyload: lazyLoad};\n    // If there is an externalref, the page we load needs to be filtered.\n    if (externalref) {\n        formParams.destinationtype = getDestinationTypeFromType(type);\n        formParams.filtervalue = externalref;\n    }\n    setWaitingCursor(true, modalForm);\n    const serialFormParams = Utils.serialize(formParams);\n    const bodyContent = browserForm.getBody(serialFormParams);\n    await browserForm.modal.setBodyContent(bodyContent);\n    setWaitingCursor(false, modalForm);\n    scrollToTop();\n    // Reset the filter values.\n    filterValues = {\n        animation: '',\n        speakers: '',\n        topics: '',\n        playlists: '',\n        series: '',\n        collections: '',\n    };\n}\n\n/**\n * Get the filter name from the resource type.\n * @param {String} type\n */\nfunction getDestinationTypeFromType(type) {\n    switch (type) {\n        case 'speakers':\n        case 'topics':\n        case 'playlists':\n            return 'play';\n        case 'series':\n            return 'playlists';\n        case 'collections':\n            return 'series';\n        default:\n            return '';\n    }\n}\n\n/**\n * When the resource type is changed, clear any selections.\n * We do this by clicking the on the selected option.\n */\nfunction clearSelectedResource() {\n    const selectedoption = document.getElementById('id_externalref')\n                            .parentElement.querySelector('span[role=\"option\"]');\n    selectedoption?.firstElementChild.click();\n}\n\n/**\n * Set the cursor to waiting or default.\n * We avoid updating any newly rendered content.\n *\n * @param {Boolean} waiting\n * @param {ModalForm} modalObject\n * @param {Boolean} selective\n */\nexport function setWaitingCursor(waiting, modalObject, selective = true) {\n    var selector;\n    if (selective) {\n        selector = '*:is(.browser-filters *, .modal-content > *, form, form > *, .modal-header *,';\n        selector += ' .modal-footer *, .browser-sidebar, .browser-sidebar *, .resource-container)';\n        selector += ', .video-card-wrapper, .video-card-wrapper *';\n    } else {\n        selector = '*';\n    }\n    const modalElement = modalObject.modal.getRoot()[0];\n    const resources = [...modalElement.querySelectorAll(selector)];\n    if (waiting) {\n        for (const node of resources) {\n            if (!node.classList.contains('d-none')) {\n                node.style.cursor = 'wait';\n            }\n        }\n    } else {\n        modalElement.querySelector('.modal-header > button > span').style.cursor = 'pointer';\n        for (const node of resources) {\n            if (!node.classList.contains('d-none')) {\n                let cursor = (node.tagName === 'BUTTON'\n                                || node.tagName === 'A'\n                                || node.tagName === 'I') ? 'pointer' : 'default';\n                node.style.cursor = cursor;\n            }\n        }\n    }\n}\n\n/**\n * Filter the resources in the browser by hiding them in the DOM.\n * @param {String} filterName\n * @param {String} selectedValue\n */\nasync function filterResources(filterName, selectedValue,) {\n    return new Promise((resolve) => {\n        if (filterValues[filterName] === selectedValue) {\n            return;\n        }\n        setWaitingCursor(true, modalForm);\n        // The timeout is required to allow the DOM to update before we start filtering.\n        setTimeout(function() {\n            const resources = modalForm.modal.getRoot()[0].getElementsByClassName('video-card-wrapper');\n                for (const resource of resources) {\n                    const showResource = checkDisplayResource(resource, filterName, selectedValue);\n                    toggleElement(resource, showResource, filterName);\n                }\n                setWaitingCursor(false, modalForm);\n                filterValues[filterName] = selectedValue;\n                resolve();\n        }, 100);\n    });\n}\n\n/**\n * Check for see whether to display a resource or not.\n * @param {HTMLelement} resource\n * @param {String} filterName\n * @param {String} selectedValue\n *\n * @returns {bool}\n */\nfunction checkDisplayResource(resource, filterName, selectedValue) {\n    if (selectedValue === '') {\n        return true;\n    }\n    const filterValues = resource.getAttribute('data-' + filterName)?.split(' ');\n    for (let value of filterValues) {\n        // Some values are stored with a suffix, indicating video or playlist order.\n        value = value.split('___')[0];\n        if (value === selectedValue) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Toggle the display of a element.\n * @param {HTMLelement} element\n * @param {bool} display\n * @param {string} filterName\n */\nfunction toggleElement(element, display, filterName) {\n    let hiddenByList = element.getAttribute('data-hiddenby');\n    if (display) {\n        if (hiddenByList.includes(filterName)) {\n            hiddenByList = hiddenByList.replace(filterName, '');\n            hiddenByList = hiddenByList.trim();\n            element.setAttribute('data-hiddenby', hiddenByList);\n            if (hiddenByList === '') {\n                element.classList.remove('d-none');\n                element.setAttribute('aria-hidden', 'false');\n            }\n        }\n    }\n    if (!display) {\n        if (hiddenByList === '' || !hiddenByList.includes(filterName)) {\n            hiddenByList += ' ' + filterName;\n            element.setAttribute('data-hiddenby', hiddenByList.trim());\n            element.classList.add('d-none');\n            element.setAttribute('aria-hidden', 'true');\n        }\n    }\n}\n\n/**\n * Search the resources by query\n *\n * @param {String} query\n */\nfunction searchResources(query) {\n    const lowerQuery = query.trim().toLowerCase();\n    const resources = modalForm.modal.getRoot()[0].getElementsByClassName('video-card-wrapper');\n    for (const resource of resources) {\n        const searchables = resource.getElementsByClassName('searchable');\n        var display = false;\n        if (lowerQuery === '') {\n            display = true;\n        } else {\n            for (const searchItem of searchables) {\n                display = searchItem.textContent.toLowerCase().includes(lowerQuery);\n                if (display) {\n                    break;\n                }\n            }\n        }\n        toggleElement(resource, display, 'search');\n    }\n    return true;\n}\n\n/**\n * Order filtered resources by playlist or series order.\n *\n * @param {String} type\n * @param {String} selectedValue\n */\nfunction orderFilteredResources(type, selectedValue) {\n    let positionArray = [];\n    modalForm.modal.getRoot()[0].querySelectorAll('.video-card-wrapper:not(.d-none)')\n    .forEach(function(resource) {\n        const list = resource.getAttribute('data-' + type);\n        if (list) {\n            for (let listItem of list.split(' ')) {\n                if (!listItem.trim()) {\n                    continue;\n                }\n                if (listItem.includes(selectedValue)) {\n                    // The order is stored in the listItem.\n                    const order = listItem.split('___')[1];\n                    positionArray.push({order: order, resource: resource});\n                }\n            }\n        }\n    });\n    // Now we can reposition the resources.\n    for (let i = 0; i < positionArray.length; i++) {\n        positionArray[i].resource.style.order = positionArray[i].order;\n    }\n    orderedResources = true;\n}\n\n/**\n * Clear the sort order of the visible resources.\n * This is done when the filter is changed.\n *\n * @returns {Promise}\n */\nasync function clearOrdering() {\n    return new Promise((resolve) => {\n        modalForm.modal.getRoot()[0].querySelectorAll('.video-card-wrapper:not(.d-none)')\n        .forEach(function(resource) {\n            resource.style.order = '';\n        });\n        orderedResources = false;\n        resolve();\n    });\n}\n\n/**\n * Scroll to the top of the browser filters.\n */\nfunction scrollToTop() {\n    document.getElementsByClassName('browser-filters')[0].scrollIntoView({behavior: 'smooth', block: 'end'});\n}"],"names":["modalForm","newResourceSelected","orderedResources","filterValues","animation","speakers","topics","playlists","series","collections","searchIfSearchbutton","e","target","classList","contains","_e$target$classList2","_e$target$classList3","preventDefault","searchResources","document","getElementById","value","selectResource","externalref","resourceType","parent","parentElement","input","querySelector","dispatchEvent","Event","bubbles","suggestions","Utils","waitForElement","click","querySelectorAll","forEach","button","onModalClose","selectedOptionSelector","watch","remove","getDestinationTypeFromType","type","setWaitingCursor","waiting","modalObject","selective","selector","modalElement","modal","getRoot","resources","node","style","cursor","tagName","checkDisplayResource","resource","filterName","selectedValue","getAttribute","_resource$getAttribut","split","toggleElement","element","display","hiddenByList","includes","replace","trim","setAttribute","add","query","lowerQuery","toLowerCase","getElementsByClassName","searchables","searchItem","textContent","scrollToTop","scrollIntoView","behavior","block","addEventListener","cmid","courseid","url","window","location","href","lazyLoad","browserForm","ModalForm","formClass","args","course","lazyload","modalConfig","title","events","LOADED","modalHeight","Math","ceil","innerHeight","modalWidth","innerWidth","modalRootInner","children","setTimeout","formParams","destinationtype","filtervalue","serialFormParams","serialize","bodyContent","getBody","setBodyContent","viewResourceType","show","openResourceBrowser","_element$classList","key","async","selectedoption","firstElementChild","clearSelectedResource","_e$target2","seletedValue","Promise","resolve","order","clearOrdering","filterResources","positionArray","list","listItem","push","i","length","orderFilteredResources"],"mappings":"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"}